name: Triggering Code

on:
  repository_dispatch:
    types: [org-workflow-bot]

jobs:
  register:
    runs-on: ubuntu-latest
    steps:
    - uses: SvanBoxel/organization-workflow@main
      with:
        id: ${{ github.event.client_payload.id }}
        callback_url: ${{ github.event.client_payload.callback_url }}
        sha: ${{ github.event.client_payload.sha }}
        run_id: ${{ github.run_id }}
        name: ${{ github.workflow }}
        enforce: true
        enforce_admin: true
    - name: Creating image path list
      id: get_image_path_list
      run: |
        excluded_dirs=('LICENCE' '.gitignore' '.md' '.gitmodules' '.github/workflows')
        echo "excluded dirs: ${excluded_dirs[@]}"
        echo "commits: ${{ toJson(github.event.client_payload.event.commits[0].modified) }}"
        echo "repository: ${{ github.event.client_payload.repository.full_name }}"
        echo "ref: ${{ github.event.client_payload.sha }}"
        echo "token: ${{ github.event.client_payload.token }}"
        
        file_list=($(echo "${{ toJson(github.event.client_payload.event.commits[0].modified) }}" | tr -d '[' | tr -d ']' ))
        echo "File list: ${file_list[@]}"
        path_list=""
        repo=$(echo ${{ github.event.client_payload.repository.full_name }} | awk -F'/' '{print $2}')
        echo "Repo: $repo"
        for i in "${file_list[@]}" 
        do
          folder=$(echo $i | awk -F'/' '{print $1}')
          echo "Folder: $folder"
          elem_found=false
          for elem in ${excluded_dirs[@]}
          do
            echo "Each file: $i"
            if grep -q "$elem" <<< "$i"
            then
              elem_found=true
              echo "File is part of the excluded elements."
            fi
          done
          if [[ $elem_found == false ]]
          then
            echo "do the pipeline"
            path_list="$path_list $repo/$folder"
          fi    
        done
        echo "Path list: $path_list"
        path_list_unique=$(echo $path_list | tr ' ' '\n' | sort -u | tr '\n' ' ' )
        path_list_unique=$(echo $path_list_unique | sed 's/ *$//g')
        echo "Path list unique: $path_list_unique"
        echo "::set-output name=path_list_unique::$path_list_unique"
        echo "::set-output name=folder_found::$folder_found"
    - name: Get Token
      id: get_workflow_token
      if: steps.get_image_path_list.outputs.folder_found == 'true'
      uses: tibdex/github-app-token@v1
      with:
        private_key: ${{ secrets.ICUB_TECH_CODE_KEY }}
        app_id: ${{ secrets.ICUB_TECH_CODE_ID }}
        repository: lauracavaliere/code
            
    - name: Repository dispatch to code
      if: steps.get_image_path_list.outputs.folder_found == 'true'
      uses: peter-evans/repository-dispatch@v1
      env:
        GITHUB_APPS_TOKEN: ${{ steps.get_workflow_token.outputs.token }}
      with:
        token: ${{ env.GITHUB_APPS_TOKEN }}
        repository: lauracavaliere/code
        event-type: robotology_trigger
        client-payload: '{"type": "robotology_trigger", "paths": "${{ steps.get_image_path_list.outputs.path_list_unique }}" }'
        
        
        
